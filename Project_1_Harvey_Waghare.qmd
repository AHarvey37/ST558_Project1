---
title: "Project1_Harvey_Waghare"
author: "Andrew Harvey & Nishad Waghare"
date: "14 June 2024"
format: html
editor: visual
---

# Project 1

## Initial Data Processing Steps

The follow code chunk executed steps 1 - 6 in preparation for creating the functions that will be utilized in the data processing. These chunks **do not execute** and are only included to display how the functions worked prior to the function's creation.

```{r First Step}
#read in tidyverse 
library(tidyverse)
```

Review data and change names

```{r STEP 1, eval=FALSE}
#create tibble from data on website
#raw_DF <- as.tibble(read.csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv"))
cleaned_DF<- raw_DF|>
  #rename column
  rename("area_name" = "Area_name")|>
  #select only instructed columns
  select(area_name, STCOU, ends_with("D"))
```

create long table

```{r STEP 2,eval=FALSE}
new_df <- pivot_longer(cleaned_DF, 
                       names_to = "Info",
                       cols = ends_with("D"))
```

separate info col

```{r STEP 3, eval=FALSE}
#add year variable
new_df<- new_df|>
  mutate(year = as.numeric(substr(Info,8,9)))|>
  #use when() statement to create 4 digit year
  mutate(year = if_else(year>24,year>24, as.numeric(paste0("19",year)),as.numeric(paste0("200",year)))))

new_df<-new_df|>
  #change info to equal the 7 character educational code
  mutate(Info = substr(Info,1,7))|>
  rename(enrollment = value)|>
  #arrange Variables for better visual
  select(area_name, STCOU, Info, year, enrollment)

```

Divide into 2 datasets
```{r STEP 4, eval=FALSE}
#find indices of observations that belong in county data set
x<-grep(pattern = ", \\w\\w",new_df$area_name)
#create county data set
county_df<- new_df[x,]
#create non-county dataset
nonCounty_df<- new_df[-x,]
#check if county dataset and noncounty dataset combine have same number of rows as new_df
#i.e. check if any rows were lost
nrow(county_df)+nrow(nonCounty_df) == nrow(new_df)
#add class to datasets
class(county_df)<- c("county", class(county_df))
class(nonCounty_df)<- c("non-county", class(nonCounty_df))
#check
class(county_df)
class(nonCounty_df)
```

Create states in county data set
```{r STEP 5, eval=FALSE}
#add State variable to county data set
county_df<- county_df|>
  #adds state variable using substr. substr takes area_name as the vector, uses nchar to count number of characters in area_name and subtracts 2 to find where to start, uses nchar to find last char position
  mutate("state" = substr(area_name, nchar(area_name)-2, nchar(area_name)))|>
  #rearrange variables
  select(area_name, state, STCOU, Info, year, value)
```

create division in non-county data set
```{r STEP 6, eval=FALSE}
#create division vectors
division1 <- toupper(c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island","Vermont"))
division2 <- toupper(c("New Jersey", "New York", "Pennsylvania"))
division3 <- toupper(c("Illinois", "Indiana", "Michigan", "Ohio", "Wisconsin"))
division4 <- toupper(c("Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska", "North Dakota", "South Dakota"))
division5 <- toupper(c("Delaware", "Florida", "Georgia", "Maryland" , "North Carolina", "South Carolina", "Virginia", "DISTRICT OF COLUMBIA", "West Virginia"))
division6 <- toupper(c("Alabama", "Kentucky", "Mississippi", "Tennessee"))
division7 <- toupper(c("Arkansas", "Louisiana", "Oklahoma",   "Texas"))
division8 <- toupper(c("Arizona", "Colorado", "Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming"))
division9 <- toupper(c("Alaska", "California", "Hawaii", "Oregon", "Washington"))
#add Division variable to noncounty data set
nonCounty_df<- nonCounty_df|>
  mutate("division" = if_else(area_name %in% division1,
                              "DIVISION 1",
                              if_else(area_name %in% division2,
                                      "DIVISION 2",
                                      if_else(area_name %in% division3,
                                              "DIVISION 3",
                                              if_else(area_name %in% division4,
                                                      "DIVISION 4",
                                                      if_else(area_name %in% division5,
                                                              "DIVISION 5",
                                                              if_else(area_name %in% division6,
                                                                      "DIVISION 6",
                                                                      if_else(area_name %in% division7,
                                                                              "DIVISION 7",
                                                                              if_else(area_name %in% division8,
                                                                                      "DIVISION 8",
                                                                                      if_else(area_name %in% division9,
                                                                                              "DIVISION 9",
                                                                                              "ERROR"))))))))))
```


## Data Processing Functions

function1
```{r function 1}
rename_and_select <- function(raw_df){
  pass_df<-raw_df|>
    #rename column
    rename("area_name" = "Area_name")|>
    #select only instructed columns
    select(area_name, STCOU, ends_with("D"))
  return(pass_df)
}
```


function2
```{r function 2}
create_longer_w_year<-function(pass_df){
  #create new tibble
  passed_df <- pivot_longer(pass_df,
                            names_to = "Info",
                            cols = ends_with("D"))
  #add year to tibble
  passed_df<- passed_df|>
    #rename value to enrollment
    rename(enrollment = value)|>
    mutate(year = as.numeric(substr(Info,8,9)))|>
    #change 2 digit year to 4 digit year
    mutate(year = if_else(year>24, as.numeric(paste0("19",year)),as.numeric(paste0("200",year))))
  passed_df<-passed_df|>
  #change info to equal the 7 character educational code
  mutate(Info = substr(Info,1,7))|>
  #arrange Variables for better visual
  select(area_name, STCOU, Info, year, enrollment)
  return(passed_df)
  }
```


function 3
```{r function 3}
create_state_var<- function(county_df){
  #add State variable to county data set
  county_df<- county_df|>
  #adds state variable using substr. substr takes area_name as the vector, uses nchar to count number of characters in area_name and subtracts 2 to find where to start, uses nchar to find last char position
    mutate("state" = substr(area_name, nchar(area_name)-2, nchar(area_name)))|>
    #rearrange variables
    select(area_name, state, STCOU, Info, year, enrollment)
  return(county_df)
  }
```

function 4
```{r function 4}
create_division_var<- function(nonCounty_df){
  #create division vectors
  division1 <- toupper(c("Connecticut", "Maine", "Massachusetts", "New Hampshire", "Rhode Island","Vermont"))
  division2 <- toupper(c("New Jersey", "New York", "Pennsylvania"))
  division3 <- toupper(c("Illinois", "Indiana", "Michigan", "Ohio", "Wisconsin"))
  division4 <- toupper(c("Iowa", "Kansas", "Minnesota", "Missouri", "Nebraska", "North Dakota", "South Dakota"))
  division5 <- toupper(c("Delaware", "Florida", "Georgia", "Maryland" , "North Carolina", "South Carolina", "Virginia", "DISTRICT OF COLUMBIA", "West Virginia"))
  division6 <- toupper(c("Alabama", "Kentucky", "Mississippi", "Tennessee"))
  division7 <- toupper(c("Arkansas", "Louisiana", "Oklahoma",   "Texas"))
  division8 <- toupper(c("Arizona", "Colorado", "Idaho", "Montana", "Nevada", "New Mexico", "Utah", "Wyoming"))
  division9 <- toupper(c("Alaska", "California", "Hawaii", "Oregon", "Washington"))
  #add Division variable to noncounty data set
  nonCounty_df2<- nonCounty_df|>
    # mutate(division = 0)|>
    mutate(division = ifelse(area_name %in% division1,
                                "1",
                                if_else(area_name %in% division2,
                                        "2",
                                        if_else(area_name %in% division3,
                                                "3",
                                                if_else(area_name %in% division4,
                                                        "4",
                                                        if_else(area_name %in% division5,
                                                                "5",
                                                                if_else(area_name %in% division6,
                                                                        "6",
                                                                        if_else(area_name %in% division7,
                                                                                "7",
                                                                                if_else(area_name %in% division8,
                                                                                        "8",
                                                                                        if_else(area_name %in% division9,
                                                                                                "9",
                                                                                                "ERROR"))))))))))
  return(nonCounty_df2)
  }
```

function 6
```{r function 6}
split_tibbles<- function(pass_df){
  #find indices of observations that belong in county data set
  x<-grep(pattern = ", \\w\\w",pass_df$area_name)
  #create county data set
  county_df<- pass_df[x,]|>
    create_state_var()
  #create non-county dataset
  nonCounty_df<- pass_df[-x,]|>
    create_division_var()
  #add class to datasets
  class(county_df)<- c("county", class(county_df))
  class(nonCounty_df)<- c("non_county", class(nonCounty_df))
  #return data sets
  return(list(county_df, nonCounty_df))
}
```

### Create wrapper function

put it together
```{r wrapper}
my_wrapper <- function(url, pass_df = as.tibble(c(1:5))){
  pass_df<-read.csv(url)|>
    rename_and_select()|>
    create_longer_w_year()|>
    split_tibbles()
  return(pass_df)
}
```

test wrapper
```{r test wrapper}
my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
```

### Create 2 lists using above functions and wrapper

parse two data sets
```{r parse}
list1<-sapply(c("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv","https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv"), my_wrapper)

#test
print(list1)
print(list1[[2]])
print(list1[[3]])
print(list1[[4]])
```
## Combine data function

combine data
```{r combine function}
combine_data_sets <-function(list1){
  combined_county<-bind_rows(list1[[1]],list1[[3]])
  class(combined_county)<- c("county",class(combined_county))
  combined_noncounty<-bind_rows(list1[[2]],list1[[4]])
  class(combined_noncounty)<- c("non_county",class(combined_noncounty))
  x<-list(combined_county,combined_noncounty)
  names(x)<-c("county","non_county")
  return(x)
}
```

### Test combination
```{r}
combined_data <- combine_data_sets(list1)
names(combined_data)<- c("county","non_county")
combined_data$county
combined_data$non_county
```


## Plotting Functions

```{r}
# Plot state function
plot.state <- function(df, var_name = "enrollment") {
  df <- df %>%
    filter(division != "ERROR") %>%
    group_by(year, division) %>%
    summarize(mean_value = mean(.data[[var_name]], na.rm = TRUE), .groups = 'drop')
  
  ggplot(df, aes(x = year, y = mean_value, color = division)) +
    geom_line() +
    labs(title = "Mean Enrollment by Division Over Time",
         x = "Year",
         y = "Mean Enrollment")
} 
```

``` {r}

# Plot county function
plot.county <- function(df, state = NULL, group = "top", number = 5, var_name = "enrollment") {
  if (!is.null(state)) {
    df <- df %>% filter(state == state)
  }
  
  summary_df <- df %>%
    group_by(area_name) %>%
    summarize(mean_value = mean(.data[[var_name]], na.rm = TRUE), .groups = 'drop') %>%
    arrange(if (group == "top") desc(mean_value) else mean_value) %>%
    slice_head(n = number)
  
  plot_df <- df %>% filter(area_name %in% summary_df$area_name)
  
  ggplot(plot_df, aes(x = year, y = .data[[var_name]], color = area_name)) +
    geom_line() +
    labs(title = paste("Top/Bottom", number, "Counties in", state),
         x = "Year",
         y = var_name)
}

```

Putting it Together

```{r}
# URLs of datasets
# urls <- c(
#   "https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv",
#   "https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv"
# )

# # Process data
# data_list <- lapply(urls, process_data)
# 
# # Combine data
# combined_data <- combine_data(data_list)

# Plot state data
plot.state(combined_data$non_county, var_name = "enrollment")

# Plot county data with different parameters
plot.county(combined_data$county, state = "NC", group = "top", number = 20, var_name = "enrollment")
plot.county(combined_data$county, state = "SC", group = "bottom", number = 7, var_name = "enrollment")
plot.county(combined_data$county, var_name = "enrollment")  # Default parameters
plot.county(combined_data$county, state = "PA", group = "top", number = 8, var_name = "enrollment")

# Additional URLs for further processing
additional_urls <- c(
  "https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv",
  "https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv"
)

# Process additional data
additional_data_list <- sapply(additional_urls, my_wrapper)

# Combine additional data
combined_additional_data <- combine_data_sets(additional_data_list)
# Plot additional state data
plot.state(combined_additional_data$non_county, var_name = "enrollment")

# Plot additional county data with different parameters
plot.county(combined_additional_data$county, state = "CA", group = "top", number = 15, var_name = "enrollment")
plot.county(combined_additional_data$county, state = "TX", group = "top", number = 4, var_name = "enrollment")
plot.county(combined_additional_data$county, var_name = "enrollment")  # Default parameters
plot.county(combined_additional_data$county, state = "NY", group = "top", number = 10, var_name = "enrollment")

```